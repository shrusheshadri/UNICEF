#Analysis: Calculating weighted averages

# Calculate population-weighted averages
# Convert '2022_projected_births' to numeric, coercing errors
df_merged['2022_projected_births'] = pd.to_numeric(df_merged['2022_projected_births'], errors='coerce')

# Define the coverage columns
coverage_cols = [
    'Antenatal care 4+ visits - percentage of women (aged 15-49 years) attended at least four times during pregnancy by any provider',
    'Skilled birth attendant - percentage of deliveries attended by skilled health personnel'
]

# Calculate weighted average for each group in 'Status.U5MR'
weighted_averages = {}
for status in df_merged['Status.U5MR'].unique():
    if pd.notna(status):
        group_df = df_merged[df_merged['Status.U5MR'] == status].copy()
        weighted_averages[status] = {}
        for col in coverage_cols:
            # Drop rows with missing coverage or zero/missing population
            valid_data = group_df.dropna(subset=[col, '2022_projected_births']).copy()
            valid_data = valid_data[valid_data['2022_projected_births'] > 0]

            if not valid_data.empty:
                weighted_avg = (valid_data[col] * valid_data['2022_projected_births']).sum() / valid_data['2022_projected_births'].sum()
                weighted_averages[status][col] = weighted_avg
            else:
                weighted_averages[status][col] = None

# Replace None values in weighted_averages with 0 for plotting
for status in weighted_averages:
    for indicator in weighted_averages[status]:
        if weighted_averages[status][indicator] is None:
            weighted_averages[status][indicator] = 0

# Display the weighted averages (optional)
for status, averages in weighted_averages.items():
    print(f"Weighted Averages for Status: {status}")
    for indicator, avg_value in averages.items():
        print(f"  {indicator}: {avg_value:.2f}" if avg_value is not None else f"  {indicator}: No data")
