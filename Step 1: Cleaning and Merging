##Cleaning and merging the raw data files

import pandas as pd
import re

# Load demographic data without a header to inspect the structure
df_demographic_raw = pd.read_excel("/content/WPP2022_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT_REV1.xlsx", header=None)

# Use row 16 as the header and rows from 17 onwards as data
header_row_index = 16
data_start_row_index = 17

# Extract the header row
header = df_demographic_raw.iloc[header_row_index]

# Extract the data rows and assign the header
df_demographic = df_demographic_raw[data_start_row_index:].copy()
df_demographic.columns = header

# Rename columns by index to be more robust (index 2 for Country, index 51 for 2022_projected_births)
# Ensure the indices are correct based on the raw data inspection
df_demographic.rename(columns={df_demographic.columns[2]: 'Country', df_demographic.columns[51]: '2022_projected_births'}, inplace=True)


# Standardize country names in demographic data
if 'Country' in df_demographic.columns:
    df_demographic['Country'] = df_demographic['Country'].astype(str).str.strip().str.lower()
else:
    print("Error: 'Country' column not found after renaming in df_demographic.")


# Remove irrelevant entries from demographic data.
# Based on inspection, these are likely rows with aggregated data or footnotes.
# We need to be careful not to remove actual country data.
demographic_irrelevant_entries = [
    'world', 'africa', 'african union', 'americas', 'anguilla', 'arab maghreb union (amu)', 'arab states',
    'asia', 'asia and the pacific', 'caribbean', 'central africa', 'central africa (african union)',
    'central america', 'central asia', 'central and southern asia', 'common market for eastern and southern africa (comesa)',
    'community of sahel-saharan states (cen-sad)', 'east african community (eac)', 'east asia',
    'east asia and pacific', 'east and southern africa', 'eastern africa', 'eastern africa (african union)',
    'eastern asia', 'eastern europe', 'eastern europe and central asia', 'eastern mediterranean',
    'eastern and south-eastern asia', 'eastern and southern africa', 'economic community of central african states (eccas)',
    'economic community of west african states (ecowas 2025)', 'economic community of west african states (ecowas)',
    'europe', 'europe and central asia', 'european union', 'footnotes', 'intergovernmental authority on development (igad)',
    'latin america', 'latin america and the caribbean', 'least developed countries', 'less developed regions',
    'less developed regions, excluding least developed countries',
    'less developed regions, excluding least developed countries, in landlocked developing states',
    'less developed regions, excluding least developed countries, in small island developing states',
    'low-income economies', 'lower-middle-income economies', 'melanesia', 'micronesia', 'middle africa',
    'middle east and north africa', 'net migration rate (per 1,000 population)',
    'north america', 'northern africa', 'northern africa (african union)', 'northern africa and western asia',
    'northern america', 'oceania', 'oceania (exc. australia and new zealand)', 'polynesia', 'sdg regions - global',
    'south america', 'south asia', 'south sudan', 'south-east asia', 'south-eastern asia', 'southern africa',
    'southern africa (african union)', 'southern african development community (sadc)', 'southern asia',
    'sub-saharan africa', 'unicef programme regions - global', 'unicef reporting regions - global',
    'unit multiplier: units', 'unit of measure: %', 'united nations economic commission for africa',
    'upper-middle-income economies', 'western africa', 'western africa (african union)', 'western asia',
    'western europe', 'western pacific', 'world bank (high income)', 'world bank (low income)',
    'world bank (lower middle income)', 'world bank (upper middle income)', 'current age: 15 to 49 years old',
    'time period activity related to when the data are collected: end of fieldwork',
    'observation confidentaility: free'
]

df_demographic = df_demographic[~df_demographic['Country'].astype(str).str.lower().isin([entry.lower() for entry in demographic_irrelevant_entries])]
df_demographic = df_demographic.dropna(subset=['Country'])

# Based on inspection, filter out rows where 'Variant' is not 'Estimates' to focus on actual data
if 'Variant' in df_demographic.columns:
    df_demographic = df_demographic[df_demographic['Variant'] == 'Estimates']

# Based on inspection, filter out rows where 'Year' is not 2022 to get only 2022 data
if 'Year' in df_demographic.columns:
    # Need to handle potential multi-level column index after setting header from row 16
    # Access the 'Year' column correctly based on the actual column names
    # Assuming 'Year' is a top-level column name after setting header=16
    if 'Year' in df_demographic.columns:
        df_demographic['Year'] = pd.to_numeric(df_demographic['Year'], errors='coerce')
        df_demographic = df_demographic[df_demographic['Year'] == 2022]
        df_demographic = df_demographic.dropna(subset=['Year']) # Drop rows where Year couldn't be converted to numeric
    elif ('Year', 'Unnamed: 17_level_1') in df_demographic.columns: # Example for potential multi-level
         df_demographic[('Year', 'Unnamed: 17_level_1')] = pd.to_numeric(df_demographic[('Year', 'Unnamed: 17_level_1')], errors='coerce')
         df_demographic = df_demographic[df_demographic[('Year', 'Unnamed: 17_level_1')] == 2022]
         df_demographic = df_demographic.dropna(subset=[('Year', 'Unnamed: 17_level_1')])


# Load the other two dataframes (assuming they are already cleaned from previous steps)
df_global_dataflow = pd.read_excel("/GLOBAL_DATAFLOW_2018-2022.xlsx", header=1)
df_on_track = pd.read_excel("/On-track and off-track countries.xlsx")

# Clean and standardize country identifiers for global dataflow and on-track data (re-execute cleaning)
df_global_dataflow.rename(columns={'Geographic area': 'Country'}, inplace=True)
df_on_track.rename(columns={'OfficialName': 'Country'}, inplace=True)

df_global_dataflow['Country'] = df_global_dataflow['Country'].astype(str).str.strip().str.lower()
df_on_track['Country'] = df_on_track['Country'].astype(str).str.strip().str.lower()

# Remove parenthesized text and leading/trailing spaces from df_global_dataflow (re-execute cleaning)
df_global_dataflow['Country'] = df_global_dataflow['Country'].apply(lambda x: re.sub(r'\(.*?\)', '', str(x)).strip() if pd.notna(x) else x)

# Remove rows from df_global_dataflow that are not countries (re-execute cleaning)
regions_to_remove_global = ['africa', 'african union', 'americas', 'anguilla', 'arab maghreb union (amu)', 'arab states', 'asia and the pacific', 'caribbean', 'central africa (african union)', 'central america', 'central asia', 'central and southern asia', 'common market for eastern and southern africa (comesa)', 'community of sahel-Saharan states (cen-sad)', 'east african community (eac)', 'east asia and pacific', 'east and southern africa', 'eastern africa', 'eastern africa (african union)', 'eastern asia', 'eastern europe and central asia', 'eastern mediterranean', 'eastern and south-eastern asia', 'eastern and southern africa', 'economic community of central african states (eccas)', 'economic community of west african states (ecowas 2025)', 'economic community of west African states (ECOWAS)', 'europe', 'europe and central asia', 'intergovernmental authority on development (igad)', 'latin america', 'latin america and the caribbean', 'least developed countries (ldc)', 'middle africa', 'middle east and north africa', 'north america', 'northern africa', 'northern africa (african union)', 'northern africa and western asia', 'northern america', 'oceania', 'oceania (exc. australia and new zealand)', 'sdg regions - global', 'south america', 'south asia', 'south sudan', 'south-east asia', 'south-eastern asia', 'southern africa', 'southern africa (african union)', 'southern african development community (sadc)', 'southern asia', 'sub-saharan africa', 'unicef programme regions - global', 'unicef reporting regions - global', 'west and central africa', 'western africa', 'western africa (african union)', 'western asia', 'western europe', 'western pacific', 'world bank (high income)', 'world bank (low income)', 'world bank (lower middle income)', 'world bank (upper middle income)', 'footnotes', 'unit multiplier: units', 'unit of measure: %', 'observation confidentaility: free', 'time period activity related to when the da', 'current age: 15 to 49 years old']

df_global_dataflow = df_global_dataflow[~df_global_dataflow['Country'].astype(str).str.lower().isin([entry.lower() for entry in regions_to_remove_global])]

regions_to_remove_further_global = ['central africa', 'north africa', 'united nations economic commission for africa', 'west africa', 'arab maghreb union', 'common market for eastern and southern africa', 'community of sahel-Saharan states', 'east african community', 'economic community of central african states', 'economic community of west african states', 'intergovernmental authority on development', 'least developed countries', 'southern african development community', 'world bank', 'time period activity related to when the data are collected: end of fieldwork']

df_global_dataflow = df_global_dataflow[~df_global_dataflow['Country'].astype(str).str.lower().isin([entry.lower() for entry in regions_to_remove_further_global])]

df_global_dataflow = df_global_dataflow.dropna(subset=['Country'])
df_on_track = df_on_track.dropna(subset=['Country'])

# Filter and select recent data - re-execute
df_global_dataflow_filtered = df_global_dataflow[
    df_global_dataflow['Indicator'].isin([
        'Antenatal care 4+ visits - percentage of women (aged 15-49 years) attended at least four times during pregnancy by any provider',
        'Skilled birth attendant - percentage of deliveries attended by skilled health personnel'
    ])
]

df_melted = df_global_dataflow_filtered.melt(
    id_vars=['Country', 'Indicator', 'Sex'],
    value_vars=['Unnamed: 3', 'Unnamed: 4', 'Unnamed: 5', 'Unnamed: 6', 'Unnamed: 7'],
    var_name='Year_col',
    value_name='Value'
)

year_map = {
    'Unnamed: 3': 2018,
    'Unnamed: 4': 2019,
    'Unnamed: 5': 2020,
    'Unnamed: 6': 2021,
    'Unnamed: 7': 2022
}

df_melted['Year'] = df_melted['Year_col'].map(year_map)

df_melted.dropna(subset=['Value'], inplace=True)
df_melted['Value'] = pd.to_numeric(df_melted['Value'], errors='coerce')
df_melted.dropna(subset=['Value'], inplace=True)

df_melted_sorted = df_melted.sort_values(by=['Country', 'Indicator', 'Year'], ascending=[True, True, False])
df_most_recent = df_melted_sorted.drop_duplicates(subset=['Country', 'Indicator'], keep='first')

df_pivot = df_most_recent.pivot(index='Country', columns='Indicator', values='Value')


# Merge the dataframes
df_merged = pd.merge(df_pivot, df_on_track, on='Country', how='outer')
df_merged = pd.merge(df_merged, df_demographic[['Country', '2022_projected_births']], on='Country', how='outer')

# The df_merged dataframe is now ready for further analysis or calculations.
